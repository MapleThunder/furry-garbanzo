### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

type CartItem {
  id: Int!
  Item: Item
  itemId: Int
  quantity: Int!
  User: User!
  userId: Int!
}

input CartItemCreateInput {
  Item: ItemCreateOneWithoutCartInput
  quantity: Int
  User: UserCreateOneWithoutCartInput!
}

input CartItemCreateManyWithoutItemInput {
  connect: [CartItemWhereUniqueInput]
  create: [CartItemCreateWithoutItemInput]
}

input CartItemCreateManyWithoutUserInput {
  connect: [CartItemWhereUniqueInput]
  create: [CartItemCreateWithoutUserInput]
}

input CartItemCreateWithoutItemInput {
  quantity: Int
  User: UserCreateOneWithoutCartInput!
}

input CartItemCreateWithoutUserInput {
  Item: ItemCreateOneWithoutCartInput
  quantity: Int
}

input CartItemListRelationFilter {
  every: CartItemWhereInput
  none: CartItemWhereInput
  some: CartItemWhereInput
}

input CartItemScalarWhereInput {
  AND: [CartItemScalarWhereInput]
  id: IntFilter
  itemId: IntNullableFilter
  NOT: [CartItemScalarWhereInput]
  OR: [CartItemScalarWhereInput]
  quantity: IntFilter
  userId: IntFilter
}

input CartItemUpdateInput {
  Item: ItemUpdateOneWithoutCartInput
  quantity: IntFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutCartInput
}

input CartItemUpdateManyDataInput {
  quantity: IntFieldUpdateOperationsInput
}

input CartItemUpdateManyMutationInput {
  quantity: IntFieldUpdateOperationsInput
}

input CartItemUpdateManyWithoutItemInput {
  connect: [CartItemWhereUniqueInput]
  create: [CartItemCreateWithoutItemInput]
  delete: [CartItemWhereUniqueInput]
  deleteMany: [CartItemScalarWhereInput]
  disconnect: [CartItemWhereUniqueInput]
  set: [CartItemWhereUniqueInput]
  update: [CartItemUpdateWithWhereUniqueWithoutItemInput]
  updateMany: [CartItemUpdateManyWithWhereNestedInput]
  upsert: [CartItemUpsertWithWhereUniqueWithoutItemInput]
}

input CartItemUpdateManyWithoutUserInput {
  connect: [CartItemWhereUniqueInput]
  create: [CartItemCreateWithoutUserInput]
  delete: [CartItemWhereUniqueInput]
  deleteMany: [CartItemScalarWhereInput]
  disconnect: [CartItemWhereUniqueInput]
  set: [CartItemWhereUniqueInput]
  update: [CartItemUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [CartItemUpdateManyWithWhereNestedInput]
  upsert: [CartItemUpsertWithWhereUniqueWithoutUserInput]
}

input CartItemUpdateManyWithWhereNestedInput {
  data: CartItemUpdateManyDataInput!
  where: CartItemScalarWhereInput!
}

input CartItemUpdateWithoutItemDataInput {
  quantity: IntFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutCartInput
}

input CartItemUpdateWithoutUserDataInput {
  Item: ItemUpdateOneWithoutCartInput
  quantity: IntFieldUpdateOperationsInput
}

input CartItemUpdateWithWhereUniqueWithoutItemInput {
  data: CartItemUpdateWithoutItemDataInput!
  where: CartItemWhereUniqueInput!
}

input CartItemUpdateWithWhereUniqueWithoutUserInput {
  data: CartItemUpdateWithoutUserDataInput!
  where: CartItemWhereUniqueInput!
}

input CartItemUpsertWithWhereUniqueWithoutItemInput {
  create: CartItemCreateWithoutItemInput!
  update: CartItemUpdateWithoutItemDataInput!
  where: CartItemWhereUniqueInput!
}

input CartItemUpsertWithWhereUniqueWithoutUserInput {
  create: CartItemCreateWithoutUserInput!
  update: CartItemUpdateWithoutUserDataInput!
  where: CartItemWhereUniqueInput!
}

input CartItemWhereInput {
  AND: [CartItemWhereInput]
  id: IntFilter
  Item: ItemWhereInput
  itemId: IntNullableFilter
  NOT: [CartItemWhereInput]
  OR: [CartItemWhereInput]
  quantity: IntFilter
  User: UserWhereInput
  userId: IntFilter
}

input CartItemWhereUniqueInput {
  id: Int
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float]
}

input IntFieldUpdateOperationsInput {
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

type Item {
  Cart(after: CartItemWhereUniqueInput, before: CartItemWhereUniqueInput, first: Int, last: Int): [CartItem!]!
  description: String!
  id: Int!
  image: String
  largeImage: String
  price: Int!
  title: String!
  user: User!
  userId: Int!
}

input ItemCreateInput {
  Cart: CartItemCreateManyWithoutItemInput
  description: String!
  image: String
  largeImage: String
  price: Int!
  title: String!
  user: UserCreateOneWithoutItemInput!
}

input ItemCreateManyWithoutUserInput {
  connect: [ItemWhereUniqueInput]
  create: [ItemCreateWithoutUserInput]
}

input ItemCreateOneWithoutCartInput {
  connect: ItemWhereUniqueInput
  create: ItemCreateWithoutCartInput
}

input ItemCreateWithoutCartInput {
  description: String!
  image: String
  largeImage: String
  price: Int!
  title: String!
  user: UserCreateOneWithoutItemInput!
}

input ItemCreateWithoutUserInput {
  Cart: CartItemCreateManyWithoutItemInput
  description: String!
  image: String
  largeImage: String
  price: Int!
  title: String!
}

input ItemListRelationFilter {
  every: ItemWhereInput
  none: ItemWhereInput
  some: ItemWhereInput
}

input ItemScalarWhereInput {
  AND: [ItemScalarWhereInput]
  description: StringFilter
  id: IntFilter
  image: StringNullableFilter
  largeImage: StringNullableFilter
  NOT: [ItemScalarWhereInput]
  OR: [ItemScalarWhereInput]
  price: IntFilter
  title: StringFilter
  userId: IntFilter
}

input ItemUpdateInput {
  Cart: CartItemUpdateManyWithoutItemInput
  description: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  largeImage: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutItemInput
}

input ItemUpdateManyDataInput {
  description: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  largeImage: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input ItemUpdateManyMutationInput {
  description: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  largeImage: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input ItemUpdateManyWithoutUserInput {
  connect: [ItemWhereUniqueInput]
  create: [ItemCreateWithoutUserInput]
  delete: [ItemWhereUniqueInput]
  deleteMany: [ItemScalarWhereInput]
  disconnect: [ItemWhereUniqueInput]
  set: [ItemWhereUniqueInput]
  update: [ItemUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ItemUpdateManyWithWhereNestedInput]
  upsert: [ItemUpsertWithWhereUniqueWithoutUserInput]
}

input ItemUpdateManyWithWhereNestedInput {
  data: ItemUpdateManyDataInput!
  where: ItemScalarWhereInput!
}

input ItemUpdateOneWithoutCartInput {
  connect: ItemWhereUniqueInput
  create: ItemCreateWithoutCartInput
  delete: Boolean
  disconnect: Boolean
  update: ItemUpdateWithoutCartDataInput
  upsert: ItemUpsertWithoutCartInput
}

input ItemUpdateWithoutCartDataInput {
  description: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  largeImage: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutItemInput
}

input ItemUpdateWithoutUserDataInput {
  Cart: CartItemUpdateManyWithoutItemInput
  description: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  largeImage: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input ItemUpdateWithWhereUniqueWithoutUserInput {
  data: ItemUpdateWithoutUserDataInput!
  where: ItemWhereUniqueInput!
}

input ItemUpsertWithoutCartInput {
  create: ItemCreateWithoutCartInput!
  update: ItemUpdateWithoutCartDataInput!
}

input ItemUpsertWithWhereUniqueWithoutUserInput {
  create: ItemCreateWithoutUserInput!
  update: ItemUpdateWithoutUserDataInput!
  where: ItemWhereUniqueInput!
}

input ItemWhereInput {
  AND: [ItemWhereInput]
  Cart: CartItemListRelationFilter
  description: StringFilter
  id: IntFilter
  image: StringNullableFilter
  largeImage: StringNullableFilter
  NOT: [ItemWhereInput]
  OR: [ItemWhereInput]
  price: IntFilter
  title: StringFilter
  user: UserWhereInput
  userId: IntFilter
}

input ItemWhereUniqueInput {
  id: Int
}

type Mutation {
  createOneCartItem(data: CartItemCreateInput!): CartItem!
  createOneItem(data: ItemCreateInput!): Item!
  createOneUser(data: UserCreateInput!): User!
  deleteManyCartItem(where: CartItemWhereInput): BatchPayload!
  deleteManyItem(where: ItemWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteOneItem(where: ItemWhereUniqueInput!): Item
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyCartItem(data: CartItemUpdateManyMutationInput!, where: CartItemWhereInput): BatchPayload!
  updateManyItem(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateOneCartItem(data: CartItemUpdateInput!, where: CartItemWhereUniqueInput!): CartItem
  updateOneItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneCartItem(create: CartItemCreateInput!, update: CartItemUpdateInput!, where: CartItemWhereUniqueInput!): CartItem!
  upsertOneItem(create: ItemCreateInput!, update: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NullableFloatFieldUpdateOperationsInput {
  set: Float
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum Permission {
  ADMIN
  ITEM_CREATE
  ITEM_DELETE
  ITEM_UPDATE
  PERMISSION_UPDATE
  USER
}

type Query {
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItems(after: CartItemWhereUniqueInput, before: CartItemWhereUniqueInput, first: Int, last: Int): [CartItem!]!
  item(where: ItemWhereUniqueInput!): Item
  items(after: ItemWhereUniqueInput, before: ItemWhereUniqueInput, first: Int, last: Int): [Item!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

type User {
  Cart(after: CartItemWhereUniqueInput, before: CartItemWhereUniqueInput, first: Int, last: Int): [CartItem!]!
  email: String!
  id: Int!
  Item(after: ItemWhereUniqueInput, before: ItemWhereUniqueInput, first: Int, last: Int): [Item!]!
  name: String!
  password: String!
  permissions: [Permission!]!
  resetToken: String
  resetTokenExpiry: Float
}

input UserCreateInput {
  Cart: CartItemCreateManyWithoutUserInput
  email: String!
  Item: ItemCreateManyWithoutUserInput
  name: String!
  password: String!
  permissions: UserCreatepermissionsInput
  resetToken: String
  resetTokenExpiry: Float
}

input UserCreateOneWithoutCartInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCartInput
}

input UserCreateOneWithoutItemInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutItemInput
}

input UserCreatepermissionsInput {
  set: [Permission]
}

input UserCreateWithoutCartInput {
  email: String!
  Item: ItemCreateManyWithoutUserInput
  name: String!
  password: String!
  permissions: UserCreatepermissionsInput
  resetToken: String
  resetTokenExpiry: Float
}

input UserCreateWithoutItemInput {
  Cart: CartItemCreateManyWithoutUserInput
  email: String!
  name: String!
  password: String!
  permissions: UserCreatepermissionsInput
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateInput {
  Cart: CartItemUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  Item: ItemUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  resetToken: NullableStringFieldUpdateOperationsInput
  resetTokenExpiry: NullableFloatFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  resetToken: NullableStringFieldUpdateOperationsInput
  resetTokenExpiry: NullableFloatFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutCartInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCartInput
  update: UserUpdateWithoutCartDataInput
  upsert: UserUpsertWithoutCartInput
}

input UserUpdateOneRequiredWithoutItemInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutItemInput
  update: UserUpdateWithoutItemDataInput
  upsert: UserUpsertWithoutItemInput
}

input UserUpdatepermissionsInput {
  set: [Permission]
}

input UserUpdateWithoutCartDataInput {
  email: StringFieldUpdateOperationsInput
  Item: ItemUpdateManyWithoutUserInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  resetToken: NullableStringFieldUpdateOperationsInput
  resetTokenExpiry: NullableFloatFieldUpdateOperationsInput
}

input UserUpdateWithoutItemDataInput {
  Cart: CartItemUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  resetToken: NullableStringFieldUpdateOperationsInput
  resetTokenExpiry: NullableFloatFieldUpdateOperationsInput
}

input UserUpsertWithoutCartInput {
  create: UserCreateWithoutCartInput!
  update: UserUpdateWithoutCartDataInput!
}

input UserUpsertWithoutItemInput {
  create: UserCreateWithoutItemInput!
  update: UserUpdateWithoutItemDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  Cart: CartItemListRelationFilter
  email: StringFilter
  id: IntFilter
  Item: ItemListRelationFilter
  name: StringFilter
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  password: StringFilter
  permissions: [Permission]
  resetToken: StringNullableFilter
  resetTokenExpiry: FloatNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
